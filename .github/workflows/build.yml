name: Build

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read
      packages: read

    env:
      PYTHONIOENCODING: utf-8
      PYTHONUTF8: 1

    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify model file
        run: |
          $modelPath = "models/DocLayout-YOLO-DocStructBench-onnx/model.onnx"
          if (Test-Path $modelPath) {
              $size = (Get-Item $modelPath).Length / 1MB
              Write-Host "Model file exists, size: $size MB"
          } else {
              Write-Host "Model file not found, downloading..."
              python download_model.py
          }
        shell: pwsh

      - name: Install NSIS
        shell: powershell
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

          # 定义下载参数
          $nsisVersion = "3.09"
          $urls = @(
              "https://sourceforge.net/projects/nsis/files/NSIS%203/$nsisVersion/nsis-$nsisVersion-setup.exe/download",
              "https://nchc.dl.sourceforge.net/project/nsis/NSIS%203/$nsisVersion/nsis-$nsisVersion-setup.exe",
              "https://downloads.sourceforge.net/project/nsis/NSIS%203/$nsisVersion/nsis-$nsisVersion-setup.exe"
          )
          $output = "nsis-setup.exe"
          $maxAttempts = 3

          # 尝试下载
          $downloaded = $false
          foreach ($url in $urls) {
              Write-Host "Trying to download NSIS from: $url"
              try {
                  $attempt = 1
                  while ($attempt -le $maxAttempts) {
                      try {
                          Invoke-WebRequest -Uri $url -OutFile $output -UseBasicParsing
                          if (Test-Path $output) {
                              $fileSize = (Get-Item $output).Length
                              if ($fileSize -gt 1MB) {
                                  Write-Host "Successfully downloaded NSIS installer (Size: $($fileSize/1MB) MB)"
                                  $downloaded = $true
                                  break
                              }
                          }
                      } catch {
                          Write-Host "Attempt $attempt failed: $_"
                      }
                      $attempt++
                      Start-Sleep -Seconds 5
                  }
                  if ($downloaded) { break }
              } catch {
                  Write-Host "Failed to download from $url : $_"
                  continue
              }
          }

          if (-not $downloaded) {
              throw "Failed to download NSIS from all sources"
          }

          # 验证下载的文件
          if (-not (Test-Path $output)) {
              throw "NSIS installer not found"
          }

          $fileSize = (Get-Item $output).Length
          if ($fileSize -lt 1MB) {
              throw "Downloaded file is too small: $($fileSize/1MB) MB"
          }

          # 安装 NSIS
          Write-Host "Installing NSIS..."
          $process = Start-Process -FilePath $output -ArgumentList "/S" -Wait -PassThru
          if ($process.ExitCode -ne 0) {
              throw "NSIS installation failed with exit code: $($process.ExitCode)"
          }

          # 验证安装
          $nsisPath = "C:\Program Files (x86)\NSIS\makensis.exe"
          if (-not (Test-Path $nsisPath)) {
              throw "NSIS installation not found at: $nsisPath"
          }

          Write-Host "NSIS installed successfully"
          & $nsisPath /VERSION

      - name: Build with PyInstaller
        run: |
          pyinstaller --noconfirm --onedir --windowed --add-data "models;models" --add-data "python_env;python_env" --icon=icon.ico main.py

      - name: Build NSIS installer
        run: |
          & 'C:\Program Files (x86)\NSIS\makensis.exe' installer.nsi

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: PDFTranslator-Installer
          path: PDFTranslator_setup.exe
